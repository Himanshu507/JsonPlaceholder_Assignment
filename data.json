{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "JSONPlaceholder API Testing Collection",
		"description": "Complete API testing collection for JSONPlaceholder with all HTTP methods and comprehensive tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET - Get All Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Array has posts\", function () {",
							"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Post has required fields\", function () {",
							"    const post = pm.response.json()[0];",
							"    pm.expect(post).to.have.property('id');",
							"    pm.expect(post).to.have.property('title');",
							"    pm.expect(post).to.have.property('body');",
							"    pm.expect(post).to.have.property('userId');",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET - Get Single Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Post ID matches request\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post.id).to.eql(1);",
							"});",
							"",
							"pm.test(\"Post has all required fields\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post).to.have.property('id');",
							"    pm.expect(post).to.have.property('title');",
							"    pm.expect(post).to.have.property('body');",
							"    pm.expect(post).to.have.property('userId');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST - Create New Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"New post has ID\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post).to.have.property('id');",
							"    pm.expect(post.id).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Created post matches sent data\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post.title).to.eql('Test Post Title');",
							"    pm.expect(post.body).to.eql('This is a test post body');",
							"    pm.expect(post.userId).to.eql(1);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Test Post Title\",\n    \"body\": \"This is a test post body\",\n    \"userId\": 1\n}"
				},
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT - Update Entire Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Post ID remains unchanged\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post.id).to.eql(1);",
							"});",
							"",
							"pm.test(\"Updated post matches sent data\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post.title).to.eql('Updated Post Title');",
							"    pm.expect(post.body).to.eql('This post has been completely updated');",
							"    pm.expect(post.userId).to.eql(2);",
							"});",
							"",
							"pm.test(\"All fields are present\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post).to.have.property('id');",
							"    pm.expect(post).to.have.property('title');",
							"    pm.expect(post).to.have.property('body');",
							"    pm.expect(post).to.have.property('userId');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 1,\n    \"title\": \"Updated Post Title\",\n    \"body\": \"This post has been completely updated\",\n    \"userId\": 2\n}"
				},
				"url": {
					"raw": "{{base_url}}/posts/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH - Partial Update Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Post ID remains unchanged\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post.id).to.eql(1);",
							"});",
							"",
							"pm.test(\"Only title was updated\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post.title).to.eql('Partially Updated Title');",
							"});",
							"",
							"pm.test(\"Other fields remain unchanged\", function () {",
							"    const post = pm.response.json();",
							"    pm.expect(post).to.have.property('body');",
							"    pm.expect(post).to.have.property('userId');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Partially Updated Title\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/posts/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE - Delete Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an empty object\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.be.an('object');",
							"    pm.expect(Object.keys(response).length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET - Users (Additional Endpoint)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Users array is not empty\", function () {",
							"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"User has required fields\", function () {",
							"    const user = pm.response.json()[0];",
							"    pm.expect(user).to.have.property('id');",
							"    pm.expect(user).to.have.property('name');",
							"    pm.expect(user).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Running request to: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response has valid JSON\", function () {",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		}
	]
}